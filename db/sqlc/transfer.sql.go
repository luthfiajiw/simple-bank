// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfer (
  from_id_accounts,
  to_id_accounts,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, from_id_accounts, to_id_accounts, amount
`

type CreateTransferParams struct {
	FromIDAccounts int64 `json:"from_id_accounts"`
	ToIDAccounts   int64 `json:"to_id_accounts"`
	Amount         int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, createTransfer, arg.FromIDAccounts, arg.ToIDAccounts, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromIDAccounts,
		&i.ToIDAccounts,
		&i.Amount,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_id_accounts, to_id_accounts, amount FROM transfer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromIDAccounts,
		&i.ToIDAccounts,
		&i.Amount,
	)
	return i, err
}

const listTransfer = `-- name: ListTransfer :many
SELECT id, from_id_accounts, to_id_accounts, amount FROM transfer
WHERE
  from_id_accounts = $1 OR
  to_id_accounts = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransferParams struct {
	FromIDAccounts int64 `json:"from_id_accounts"`
	ToIDAccounts   int64 `json:"to_id_accounts"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListTransfer(ctx context.Context, arg ListTransferParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfer,
		arg.FromIDAccounts,
		arg.ToIDAccounts,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromIDAccounts,
			&i.ToIDAccounts,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
