// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entry.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  id_accounts,
  amount
) VALUES (
  $1, $2
) RETURNING id, id_accounts, amount
`

type CreateEntryParams struct {
	IDAccounts int64 `json:"id_accounts"`
	Amount     int64 `json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntry, arg.IDAccounts, arg.Amount)
	var i Entry
	err := row.Scan(&i.ID, &i.IDAccounts, &i.Amount)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, id_accounts, amount FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntry, id)
	var i Entry
	err := row.Scan(&i.ID, &i.IDAccounts, &i.Amount)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, id_accounts, amount FROM entries
WHERE id_accounts = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListEntriesParams struct {
	IDAccounts int64 `json:"id_accounts"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, listEntries, arg.IDAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(&i.ID, &i.IDAccounts, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
